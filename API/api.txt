login:
	method: post (use form)

	localhost:8080/login

	response: {
		  status: xxx,
		  message: xxx,

		  if is a user
		   data: {
		   		userName: xxx,
		   		userEmail: xxx,
		   		role: xxx, //is a number
		   		notifications: xxx // number of unread notifications
				} 

		 if is a cinema
		 	data: {
		 		user: {
			 		userName: xxx,
			   		userEmail: xxx,
			   		role: xxx, //is a number
			   		notifications: xxx, // number of unread notifications
		   		},
			   	location: xx,
			   	description: xx,
			   	followers: xx, // number of followers
			   	comments:[
			   		{
			   			id: xx,
			   			author:{
			   				userName: xxx,
					   		userEmail: xxx,
					   		role: xxx,
					   		notifications: xxx,
			   			},
			   			content: xx,
			   			created: yyyy-MM-dd HH:mm:ss,
			   			likes: xx,
			   			subComments: xx // number of reviews
			   			replyto:{
			   				userName: xxx,
					   		userEmail: xxx,
				   			role: xxx, 
					   		notifications: xxx,
			   			}
			   		},
			   		...
			   	]	

		 	}


		 if is a admin
		 data:{
		 	id: -1, // admin's id is always -1
		 	userName: admin,
		 	userEmail: 2SeeOrNotOfficialwebsite@gmail.com,
		 	role: 2,
		 	requests: xx // number of requests 
		 }
		}

	if success, frontend will get JWT token "Authentication" in Headers of response.


register user:
	method: post (use form)

	form param(userName, userEmail, password)

	localhost:8080/common/register

	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}


	if status is 200, you will have a token "registerToken" in Headers of response, and the server will send an email with a verify code to user email


send verify code to server:
	method: post (path variable)

	localhost:8080/common/confirm/{code}

	if status == 200, user is registed


register cinema:
	method: post (use form)

	form param(userName, userEmail, password, location, description)

	localhost:8080/common/register/cinema

	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}


	if status is 200, you will have a token "registerToken" in Headers of response, and the server will send an email with a verify code to user email

send verify code to server:
	method: post (path variable)

	localhost:8080/common/confirm/cinema/{code}

	if status == 200, cinema register request is created. Client has to wait for admin's review. Server will notify the client by email when the review is over.


change password:
	method: put (use form)

	localhost:8080/user/changepwd

	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}
	frontend does not need to provide the user id, because jwt token contains user id.
	frontend should send the request with JWT token "Authentication" (received after login) in Headers


search for a movie by actor:

	method: get (use path variable)

	localhost:8080/common/film/actor/{actor}?page=xxx //page is an optional parameter, default value is 1

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}




search for a movie by director:

	method: get (use path variable)

	localhost:8080/common/film/director/{director}?page=xx //page is an optional parameter, default value is 1

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}





search for a movie by title:

	method: get (use path variable)

	localhost:8080/common/film/title/{title}?page=xx //page is an optional parameter, default value is 1

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}


search for a movie by genre:

	method: get (use path variable)

	localhost:8080/common/film/genre/{genre}?page=xx //page is an optional parameter, default value is 1

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}


search for a movie by year:

	method: get (use path variable)

	localhost:8080/common/film/year/{year}?page=xx  //page is an optional parameter, default value is 1

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}


search for popular movies:

	method: get

	localhost:8080/common/film/popular or localhost:8080/common/film/popular?page=xx 

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}



search for recent movies:
	
	method: get

	localhost:8080/common/film/recent or localhost:8080/common/film/recent?page=xxx

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}


check movie info:

	method: get (use path variable)

	localhost:8080/common/film/{filmId}

	response: {
		status: xxx,
		message: xxx,
		data:[
				{
					title: xxx,
					movieId: xxx,	
					year:  yyyy,	
					released: yyyy-MM-dd, 
					runtime: xxx,
					director: xxx,
					plot: xxx,
					like: xxx,
					rating: xxx,
					pictrue: url,
					actors:[
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						{
							actorName: xxx,
							personage: xxx
						},
						...
					],
					genres:[
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						{
							genreName:xxx
						},
						...
					],
					Comments:[
						{
							id: xx,
							author:{
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							},
							content:xxx,
							created: yyyy-MM-dd HH:mm:ss,
							likes:xxx,
							replyto: {
								id:xxx,
								username:xxx,
								userEmail:xxx
								role:null
							} // if it's just a simple comment, replyto will be null
						},
						....
					]
				},

				....
		]
	}



add favourite film:
	method: put (use path variable)

	localhost:8080/user/add/favourite/film/{filmId}

	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}


remove favourite film:
	method: delete (use path variable)

	localhost:8080/user/remove/favourite/film/{filmId}

	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}



check notifications:
	method: get

	localhost:8080/user/notifications?page=xx    //page is an optional parameter, default value is 1

	response: {
		status: xxx,
		message: xxx,
		data: [
				{
					id: xxx,
					sender:{
						id: xx,
						userName:xxx,
						userEmail:xxx,
						role: null,
					},
					receiver:{
						userName:xxx,
						userEmail:xxx,
						role: null,
					},
					created: "yyyy-MM-dd HH:mm:ss", (for example)
					title: xxx,
					message: xxx,
					read: true/false,
				},

				{
					id: xxx,
					sender:{
						id: xx,
						userName:xxx,
						userEmail:xxx,
						role: null,
					},
					receiver:{
						userName:xxx,
						userEmail:xxx,
						role: null,
					},
					date: "2020-12-11T07:03:36.000+00:00", (for example)
					message: xxx,
					read: true/false
				}

				....
		]
	}



create comment:
	method: post (request param)

	localhost:8080/user/comment/create?msg=xx&parent=xx&cinema=xx&film=xx&premier=xx&replyto=xx
	msg: content of the comment,
	parent (int, parent comment's id): if the comment is a comment of comment, it will have a parent comment,
	cinema (int, cinema's id): if the comment was left on cinema's page
	film (string, film'id): if the comment was left on film's page
	premier (int, premier'id): if the comment was left on premier's page
	replyto (int, user id): if the comment was replied to someone

	you have to send one and just one of [cinema, film, premier] to server
	if comment doesn't have parent, ignore parent
	if comment doesn't reply to someone, ignore replyto

	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}

dar um like ao comentario:
	method: put (path variable)

	localhost:8080/user/comment/{commentId}/like
	response: {
		status: xxx,
		message: xxx,
		data: nothing
	}


get comments by film
	method: get

	localhost:8080/common/film/{filmId}/commentPage{page}

	Comments:[
				{
					id: xx,
					parentId: xx, //if this comment is a comment of comment, it will have a parent comment
					author:{
						id:xxx,
						username:xxx,
						userEmail:xxx
						role:null
					},
					content:xxx,
					created: yyyy-MM-dd HH:mm:ss,
					likes:xxx,
					film: filmId, //if it's a film's comment, it will have filmId
					premier: premierId, //if it's a premier's comment, it will have premierId,
					replyto: {
						id:xxx,
						username:xxx,
						userEmail:xxx
						role:null
					} // if it's just a simple comment, replyto will be null
				},
				....
			]


remove a comment
	method: delete (path variable)

	localhost:8080/user/comment/{commentId}/remove/


buy a ticket
	method post (request body)
	body:{
		roomId: x,
		schedule: x, // uuid
		seatId: x, 
		price: x,
		buyer: x // current users'id
	}

	localhost:8080/user/buy/ticket

	if 200, server will send a email with payment info to user.


get register requests (for admin)
	method: get

	localhost:8080/admin/requests?page=xx    //page is an optional parameter, default value is 1

	response:{
		status: xx,
		message: xx,
		data:[
			{
				id: xx,
				userEmail: xx,
				userName: xx,
				password: xx,
				location: xx,
				description: xx,
				created: yyyy-MM-dd HH:mm:ss,
			},
			...
		]
	}


get register by id (for admin)
	method: get (path variable)

	localhost:8080/admin/requests/{requestId}

	response:{
		status: xx,
		message: xx,
		data:{
				id: xx,
				userEmail: xx,
				userName: xx,
				password: xx,
				location: xx,
				description: xx,
				created: yyyy-MM-dd HH:mm:ss,
			}
	}


accept a register by id (for admin)
	method: get (path variable)

	localhost:8080/admin/requests/accept/{requestId}

	response:{
		status: xx,
		message: xx,
		data: 
	}

	server will send an email to user


refuse a register by id (for admin)
	method: get (path variable)

	localhost:8080/admin/requests/refuse/{requestId}

	response:{
		status: xx,
		message: xx,
		data: 
	}

	server will send an email to user


change cinema description
	method: put (path variable)

	localhost:8080/cinema/change/description/{description}

	response:{
		status: xx,
		message: xx,
		data: 
	}




create a cinema room

	method: post (request body)

	body:{
    	cinema: xx // cinema id
   		name: xx // room name
		positions:[ "1,2", "A,B", "A1,B2"] // list of positions (string)
	}

	localhost:8080/cinema/create/room

	response:{
		status: xx,
		message: xx,
		data: 
	}



get rooms (for cinema)
	method: get
	localhost:8080/cinema/rooms

	response:{
		status: xx,
		message: xx,
		data: [
			 	seats: xx // number of seats
				
    			name: xx // room name

   	 			positions: [
   	 				{
   	 					id: xx // seat id
   	 					row: xx,
   	 					column: yx
   	 				},
   	 				...
   	 			]
		]
	}



create premier (for cinema)
	method: post (request body)

	body:{
		film: xx 			// film Id
		cinema: xx 			// cinema id
		start: yyyy-MM-dd 	// date
		end: yyyy-MM-dd 	// date
		price: xx,
		schedules:[	
			{
				start: yyyy-MM-dd HH:mm:ss,
				end: yyyy-MM-dd HH:mm:ss,
				room: room id, // one single room can have multiple schedules
			},
			...
		]
	}

	localhost:8080/cinema/create/premier

	response:{
		status: xx,
		message: xx,
		data:
	}




create schedule (for cinema)
	method: post (request body and path variable)

	localhost:8080/cinema/create/premier/{premierId}/schedule

	body:{
			start: yyyy-MM-dd HH:mm:ss,
			end: yyyy-MM-dd HH:mm:ss,
			room: room id
		}

	response:{
		status: xx,
		message: xx,
		data:
	}


delete premier (for cinema)
	method: delete (path variable)

	localhost:8080/cinema/delete/premier/{premierId}

	response:{
		status: xx,
		message: xx,
		data:
	}


delete schedule (for cinema)
	method: delete (path variable)

	localhost:8080/cinema/delete/schedule/{scheduleId}

	response:{
		status: xx,
		message: xx,
		data:
	}




get premier by id:
	method: get (path variable)

	localhost:8080/common/premier/{premierId}

	response:{
		status: xx,
		message: xx,
		data:{
			film:{
				....
			},
			start: yyyy-MM-dd,
			end: yyyy-MM-dd,
			price: xx,
			schedules:[
				id: xx,
				filmTitle: xx,
				start: yyyy-MM-dd HH:mm:ss
				end: yyyy-MM-dd HH:mm:ss
				room: {
					id: xx, // room id
					name: xx, // room name
					positions:[
						{
	   	 					id: xx // seat id
	   	 					row: xx,
	   	 					column: xx
	   	 				},
	   	 				....
					]
				}

   				sold:[	// sold positions
   					{
   	 					id: xx // seat id
   	 					row: xx,
   	 					column: xx
   	 				},
   	 				....
   				]

				free:[ 	 // free positions
					{
   	 					id: xx // seat id
   	 					row: xx,
   	 					column: xx
   	 				},
   	 				....
				]
			]
		}
	}




get schedule 

	method: get (path variable)

	localhost:8080/common/schedule/{scheduleId}


	response:{
		status: xx,
		message: xx,
		data:{
				id: xx,
				filmTitle: xx,
				start: yyyy-MM-dd HH:mm:ss,
				end: yyyy-MM-dd HH:mm:ss,
				room: {
					id: xx, // room id
					name: xx, // room name
					positions:[
						{
	   	 					id: xx // seat id
	   	 					row: xx,
	   	 					column: xx
	   	 				},
	   	 				....
					]
				},

   				sold:[	// sold positions
   					{
   	 					id: xx // seat id
   	 					row: xx,
   	 					column: xx
   	 				},
   	 				....
   				],

				free:[ 	 // free positions
					{
   	 					id: xx // seat id
   	 					row: xx,
   	 					column: xx
   	 				},
   	 				....
				]
		}
	}


	